definitions:
  common.ResponseDTO:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  v1.Application:
    properties:
      _metadata:
        $ref: '#/definitions/v1.ApplicationMetadata'
      url:
        type: string
      webhook:
        $ref: '#/definitions/v1.GitWebhook'
    type: object
  v1.ApplicationMetadata:
    properties:
      id:
        type: string
      is_webhook_enabled:
        type: boolean
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    type: object
  v1.Company:
    properties:
      _metadata:
        $ref: '#/definitions/v1.CompanyMetadata'
      id:
        type: string
      name:
        type: string
      repositories:
        items:
          $ref: '#/definitions/v1.Repository'
        type: array
    type: object
  v1.CompanyMetadata:
    properties:
      labels:
        additionalProperties:
          type: string
        type: object
      number_of_concurrent_process:
        type: integer
      total_process_per_day:
        type: integer
    type: object
  v1.GitWebhook:
    properties:
      active:
        type: boolean
      config:
        properties:
          content_type:
            type: string
          insecure_ssl:
            type: string
          url:
            type: string
        type: object
      created_at:
        type: string
      deliveries_url:
        type: string
      events:
        items:
          type: string
        type: array
      id:
        type: string
      ping_url:
        type: string
      test_url:
        type: string
      type:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  v1.JWTPayLoad:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  v1.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  v1.PasswordResetDto:
    properties:
      current_password:
        type: string
      email:
        type: string
      new_password:
        type: string
      otp:
        type: string
    type: object
  v1.Permission:
    properties:
      name:
        type: string
    type: object
  v1.RefreshTokenDto:
    properties:
      refresh_token:
        type: string
    type: object
  v1.Repository:
    properties:
      applications:
        items:
          $ref: '#/definitions/v1.Application'
        type: array
      id:
        type: string
      token:
        type: string
      type:
        type: string
    type: object
  v1.Resource:
    properties:
      name:
        type: string
    type: object
  v1.ResourceWiseRolesDto:
    properties:
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/v1.RoleDto'
        type: array
    type: object
  v1.Role:
    properties:
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/v1.Permission'
        type: array
    type: object
  v1.RoleDto:
    properties:
      name:
        type: string
    type: object
  v1.User:
    properties:
      auth_type:
        type: string
      created_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      metadata:
        $ref: '#/definitions/v1.UserMetadata'
      password:
        type: string
      phone:
        type: string
      resource_permission:
        $ref: '#/definitions/v1.UserResourcePermission'
      status:
        type: string
      updated_date:
        type: string
    type: object
  v1.UserMetadata:
    properties:
      company_id:
        type: string
    type: object
  v1.UserRegistrationDto:
    properties:
      auth_type:
        type: string
      created_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      metadata:
        $ref: '#/definitions/v1.UserMetadata'
      password:
        type: string
      phone:
        type: string
      resource_permission:
        $ref: '#/definitions/v1.UserResourcePermission'
      status:
        type: string
      updated_date:
        type: string
    type: object
  v1.UserResourcePermission:
    properties:
      metadata:
        $ref: '#/definitions/v1.UserMetadata'
      resources:
        items:
          $ref: '#/definitions/v1.ResourceWiseRolesDto'
        type: array
      user_id:
        type: string
    type: object
info:
  contact: {}
  description: Klovercloud-security API
  title: Klovercloud-ci-security API
paths:
  /api/v1/oauth/login:
    post:
      description: Api for users login
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Login dto if grant_type=password
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/v1.LoginDto'
      - description: RefreshTokenDto dto if grant_type=refresh_token
        in: body
        name: refreshTokenData
        required: true
        schema:
          $ref: '#/definitions/v1.RefreshTokenDto'
      - description: token_type type [regular/ctl] if grant_type=password
        in: path
        name: token_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  $ref: '#/definitions/v1.JWTPayLoad'
              type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Login api
      tags:
      - Oauth
  /api/v1/permissions:
    get:
      description: Api for getting permissions
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.Permission'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get api
      tags:
      - Permission
  /api/v1/resources:
    get:
      description: Api for getting resources
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.Resource'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Store api
      tags:
      - Resource
  /api/v1/roles:
    get:
      description: Api for getting role
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.Role'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get api
      tags:
      - Role
    post:
      description: Api for storing role
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: dto for creating role
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/v1.Role'
      - description: action [create_user] if admin wants to create new user
        in: path
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Store api
      tags:
      - Role
  /api/v1/roles/{name}:
    delete:
      description: Api for deleting role by name
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: role name
        in: path
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Delete api
      tags:
      - Role
    get:
      description: Api for getting role by name
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: role name
        in: path
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  $ref: '#/definitions/v1.Role'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: GetByName api
      tags:
      - Role
    put:
      description: Api for updating role by name
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: role name
        in: path
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Update api
      tags:
      - Role
  /api/v1/users:
    delete:
      description: Api to delete user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Delete api
      tags:
      - User
    get:
      description: Api for getiing all user by admins company Id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: status type [active/inactive]
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get api
      tags:
      - User
    post:
      description: Api for users registration
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token while adding new user for your compnay
        in: header
        name: Authorization
        required: true
        type: string
      - description: dto for creating user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/v1.UserRegistrationDto'
      - description: action [create_user] if admin wants to create new user
        in: path
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Registration api
      tags:
      - User
    put:
      description: Api for updating users object
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: action type [reset_password/forgot_password/attach_company/update_status]
        in: path
        name: action
        required: true
        type: string
      - description: media type [users email/phone] if action forgot_password
        in: path
        name: media
        type: string
      - description: status type [inactive/active] if action update_status
        in: path
        name: status
        type: string
      - description: updating users id, if action update_status
        in: path
        name: id
        type: string
      - description: dto for resetting users password
        in: body
        name: password_reset_dto
        required: true
        schema:
          $ref: '#/definitions/v1.PasswordResetDto'
      - description: dto for attaching company with user
        in: body
        name: company_dto
        required: true
        schema:
          $ref: '#/definitions/v1.Company'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Update api
      tags:
      - User
  /api/v1/users/{id}:
    get:
      description: Api for getiing user by id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  $ref: '#/definitions/v1.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Registration api
      tags:
      - User
swagger: "2.0"
