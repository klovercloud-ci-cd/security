definitions:
  common.ResponseDTO:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  v1.JWTPayLoad:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  v1.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  v1.RefreshTokenDto:
    properties:
      refresh_token:
        type: string
    type: object
  v1.ResourceWiseRolesDto:
    properties:
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/v1.RoleDto'
        type: array
    type: object
  v1.RoleDto:
    properties:
      name:
        type: string
    type: object
  v1.UserMetadata:
    properties:
      company_id:
        type: string
    type: object
  v1.UserRegistrationDto:
    properties:
      auth_type:
        type: string
      created_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      metadata:
        $ref: '#/definitions/v1.UserMetadata'
      password:
        type: string
      phone:
        type: string
      resource_permission:
        $ref: '#/definitions/v1.UserResourcePermission'
      status:
        type: string
      updated_date:
        type: string
    type: object
  v1.UserResourcePermission:
    properties:
      metadata:
        $ref: '#/definitions/v1.UserMetadata'
      resources:
        items:
          $ref: '#/definitions/v1.ResourceWiseRolesDto'
        type: array
      user_id:
        type: string
    type: object
info:
  contact: {}
  description: integration-manager API
  title: integration-manager API
paths:
  /api/v1/oauth/login:
    post:
      description: Api for users login
      parameters:
      - description: Login dto if grant_type=password
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/v1.LoginDto'
      - description: RefreshTokenDto dto if grant_type=refresh_token
        in: body
        name: refreshTokenData
        required: true
        schema:
          $ref: '#/definitions/v1.RefreshTokenDto'
      - description: token_type type [regular/ctl] if grant_type=password
        in: path
        name: token_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  $ref: '#/definitions/v1.JWTPayLoad'
              type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Login api
      tags:
      - Oauth
  /api/v1/users:
    post:
      description: Api for users registration
      parameters:
      - description: dto for creating user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/v1.UserRegistrationDto'
      - description: action [create_user] if admin wants to create new user
        in: path
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Registration api
      tags:
      - User
swagger: "2.0"
